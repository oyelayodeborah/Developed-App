@model KABE_Food_Ordering_System.Models.Customer
@{
    ViewBag.Title = "Register as a Customer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<p>Please kindly complete your registration process, so that you can fully enjoy KABE</p>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="col-md-6">
    @if (ViewBag.Message != null)
    {
        if (ViewBag.Message == "Success")
        {
            <div class="alert alert-success">
                <p>@ViewBag.Message <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span> </p>

            </div>

        }
        else if (ViewBag.Message == "Exist")
        {
            <div class="alert alert-error">
                <p>Role Name Exist <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span> </p>

            </div>

        }
        else if (ViewBag.Message == "Error")
        {
            <div class="alert alert-error">
                <p>@ViewBag.Message <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span> </p>

            </div>

        }
    }
    <div class="form-group ">
        @Html.LabelFor(m => m.ResidentialAddress)
        @Html.TextBoxFor(m => m.ResidentialAddress, new { @class = "form-control", maxlength = 255, minlength = 5, required = "required" })
        @Html.ValidationMessageFor(model => model.ResidentialAddress, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LocationId)
        @Html.DropDownListFor(model => model.LocationId, new SelectList(Model.Locations, "Id", "Name"), "Choose an Option", new { @class = "form-control", required = "required", @data_live_search = "true" })
        @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
    </div>

    <div class="form-group ">
        @Html.LabelFor(m => m.PhoneNumber)
        @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", maxlength = 11, pattern = "0\\d+$", @type = "phone", minlength = 11 })
        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
    </div>
    @*<div class="form-group ">
            @Html.LabelFor(m => m.Occupation)
            @Html.TextBoxFor(m => m.Occupation, new { @class = "form-control", maxlength = 35, pattern = "^[A-Z\\sa-z]+$", minlength = 3, required = "required" })
            @Html.ValidationMessageFor(model => model.Occupation, "", new { @class = "text-danger" })
        </div>*@
    <div class="form-group ">
        @Html.LabelFor(m => m.DateOfBirth)
        @Html.TextBoxFor(m => m.DateOfBirth, new { @class = "form-control", type = "date", required = "required" })
        @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
    </div>
    <div class="form-group ">
        @Html.LabelFor(m => m.Gender)
        @Html.DropDownListFor(m=>m.Gender, new[] {
       new SelectListItem() { Text = "Female", Value = "Female" },
       new SelectListItem() { Text = "Male", Value = "Male" } },
       "Choose an Option", new { @class = "form-control",required="required", @data_live_search = "true" })

        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
    </div>
    <div class="form-group ">
        @Html.LabelFor(m => m.FoodAllergies)
        @Html.TextBoxFor(m => m.FoodAllergies, new { @class = "form-control", maxlength = 255, @*pattern = "^[A-Z\\sa-z],[A-Z\\sa-z]+$",*@ required = "required", Title = "Seperate the food with comma(\",\")" })
        @Html.ValidationMessageFor(model => model.FoodAllergies, "", new { @class = "text-danger" })
    </div>
</div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">

            <input type="submit" value="SUBMIT" class="btn btn-default" />&emsp;&emsp;

        </div>
    </div>


}



@section ViewSpecificJavascript
    {
    <script>
        $(document).ready(function () {
            setTimeout(function () {
                $(".alert").fadeOut(100, null);
            },
                3000);
        });
    </script>
}